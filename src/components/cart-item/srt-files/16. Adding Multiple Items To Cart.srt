1
00:00:00,660 --> 00:00:08,230
What we're going to tackle now is grouping the cart items inside of our cart reducer.

2
00:00:08,340 --> 00:00:17,120
So if I add this item four times what we will have is the same for items inside of our car.

3
00:00:17,120 --> 00:00:20,430
Items array which we don't want.

4
00:00:20,610 --> 00:00:29,520
We want to instead just add some quantity property to this object and increase or decrease it based

5
00:00:29,520 --> 00:00:36,700
on whether or not we add the same item or we want to remove the same item from our cart.

6
00:00:36,720 --> 00:00:39,870
Now how do we tackle this.

7
00:00:39,900 --> 00:00:45,810
Well we're going to write a utility function for this and there's actually many ways to handle this

8
00:00:46,230 --> 00:00:55,600
but I'm going to write the way that best obeys relax rules the rule being that when ever we make this

9
00:00:55,690 --> 00:01:02,430
update we always want to return a new array even if the object stays the same.

10
00:01:02,440 --> 00:01:09,160
And we're just increasing the property because in order for change detection to trigger we have to remember

11
00:01:09,190 --> 00:01:16,150
that if the object that is being used as a property to display stays the same and simply a property

12
00:01:16,150 --> 00:01:20,020
changes react will not re render the component.

13
00:01:20,020 --> 00:01:28,510
So we need to make sure that every time we pass in a new object with an increase in that quantity value

14
00:01:29,170 --> 00:01:31,020
so let's actually write this code.

15
00:01:32,400 --> 00:01:38,100
So the first thing we're going to do is we are going to know that we need to call that function that

16
00:01:38,100 --> 00:01:46,020
we're about to write on our reduce code and we are going to make it inside of a new file called cart

17
00:01:46,050 --> 00:01:49,500
dot utilize dot J S inside of here.

18
00:01:49,530 --> 00:01:58,790
We can add any utility functions related to our cart redux code so what I'm going to write is first

19
00:01:59,330 --> 00:02:07,350
this function called add item to cart which is gonna take two arguments.

20
00:02:07,350 --> 00:02:16,710
The first is all the existing cart items that are in our cart items array right now and then the second

21
00:02:17,010 --> 00:02:25,240
item is going to be the cart item that we want to add because what we are gonna do is we're going to

22
00:02:25,240 --> 00:02:33,280
look inside of our existing cart items to see if that cart item already exists and we are going to actually

23
00:02:33,280 --> 00:02:35,660
write that in this code.

24
00:02:35,690 --> 00:02:39,470
So we're gonna set it to the value of existing cart item.

25
00:02:39,470 --> 00:02:47,630
If cart items stuff find is true and cart items defined we'll return you the first item found in our

26
00:02:47,630 --> 00:02:54,260
array based off a condition that we pass in here and the condition is based off of this function where

27
00:02:54,260 --> 00:03:01,880
we get each individual cart item and we'll check the car items I.D. if it matches the cart item we're

28
00:03:01,880 --> 00:03:03,230
trying to add I.D.

29
00:03:06,430 --> 00:03:12,270
if it matches it we'll set that cart item where this condition is true to our constant.

30
00:03:12,520 --> 00:03:17,470
If it doesn't find anything after looping through all of it it will be undefined.

31
00:03:17,470 --> 00:03:23,920
So then we're going to check well if existing cart item exists then what we're going to return from

32
00:03:23,920 --> 00:03:32,310
our entire function is our car item stop map because car times not map will return us a new array and

33
00:03:32,320 --> 00:03:39,850
we remember that we need to return new versions of our state so that our components know to re render

34
00:03:39,850 --> 00:03:45,430
properly now what we're going to pass is cart item right inside of our dot map.

35
00:03:45,430 --> 00:03:54,370
So again each car item and we will do the same thing where if cart item to I.D. is equal to our car

36
00:03:54,370 --> 00:04:08,660
item to add dot idea then we will create a new object where we have the cart item except the quantity

37
00:04:10,400 --> 00:04:16,670
will be cart item quantity plus one.

38
00:04:16,760 --> 00:04:22,120
Now we don't have a quantity yet but we're going to solve that after.

39
00:04:22,220 --> 00:04:28,340
So first what we'll do is if that item doesn't match.

40
00:04:28,360 --> 00:04:33,880
We just want to return the original car item because there's no need to update any of the components

41
00:04:33,880 --> 00:04:35,810
that might be relying on our object.

42
00:04:35,810 --> 00:04:38,440
All right so we don't need to make any modifications.

43
00:04:38,440 --> 00:04:41,810
We'll just return the item as it is now.

44
00:04:41,990 --> 00:04:51,000
If the car item is not found inside of our array then we want to return a new array with all of our

45
00:04:51,000 --> 00:04:54,130
existing car items that were already there.

46
00:04:54,540 --> 00:05:02,820
But we also want to now add in an object which is equal to our cart item to add except we're gonna give

47
00:05:02,820 --> 00:05:05,240
it a base quantity of one.

48
00:05:05,340 --> 00:05:11,820
And this way whenever we add our car items in any subsequent cart items we'll be able to reference that

49
00:05:11,820 --> 00:05:17,840
quantity value that we have added to our objects when we store them.

50
00:05:17,910 --> 00:05:21,480
And now we just have to import this into our reducer

51
00:05:24,890 --> 00:05:32,190
from cart utilize and it is called add item to cart.

52
00:05:32,540 --> 00:05:39,590
And now we just have to replace this code with our add item to cart passing in our state dog cart items

53
00:05:41,070 --> 00:05:48,840
as well as our action payload which is the item that we want to add and now we actually need to make

54
00:05:48,840 --> 00:05:50,630
one more modification.

55
00:05:50,850 --> 00:05:57,600
So in our shop data code I accidentally set it so that the I.D. of the items actually repeat.

56
00:05:57,600 --> 00:06:03,870
So even though they're unique in their respective array so I was going to raise reference the same I.D.

57
00:06:04,500 --> 00:06:10,440
and based on the code we wrote this will cause a problem because it'll say that Brown brim is actually

58
00:06:10,440 --> 00:06:13,650
the same idea as Adidas NMD.

59
00:06:13,650 --> 00:06:22,260
So I've provided a new file with the updated simply so that the ideas are all unique on the items themselves.

60
00:06:22,380 --> 00:06:28,020
So you just need to replace this array with the new Array that I gave you

61
00:06:31,100 --> 00:06:36,200
and now we save that and if we check our code we'll see that.

62
00:06:36,230 --> 00:06:44,670
Let's say I add this brown brim hat we look inside of our cart items and there is our object except

63
00:06:44,670 --> 00:06:47,790
with the one quantity.

64
00:06:47,790 --> 00:06:56,010
But if I add it two more times if we look in our cart we'll see that our objects quantity value has

65
00:06:56,100 --> 00:06:57,090
increased.

66
00:06:57,270 --> 00:06:59,790
Which is exactly what we want to do.

67
00:06:59,940 --> 00:07:08,070
We are grouping our items together based on this quantity value and what we're also now able to do is

68
00:07:08,130 --> 00:07:18,900
if we need to create some kind of remove action we can easily do so because we have this quantity value

69
00:07:18,930 --> 00:07:28,410
as well so before we go on and build the actual cart component that displays the items inside of our

70
00:07:28,410 --> 00:07:39,650
cart dropdown let's commit our code so let's just check and we have some pretty simple stuff so we'll

71
00:07:39,650 --> 00:07:55,520
just say updated shop data with new data and then updated cart utilize to group items in cart reducer

72
00:07:56,660 --> 00:07:57,750
we'll push this up

73
00:08:01,010 --> 00:08:01,780
and let's move on.

