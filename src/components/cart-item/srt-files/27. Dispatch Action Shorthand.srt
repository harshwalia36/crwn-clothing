1
00:00:00,420 --> 00:00:08,130
Before we build our checkout item we can actually make a small tweak to our Web site to make it more

2
00:00:08,250 --> 00:00:11,730
of a flowing user experience.

3
00:00:11,730 --> 00:00:18,720
Now in order for us to go to our checkout page we have to open up our cart dropdown and then click the

4
00:00:18,720 --> 00:00:20,350
go to checkout button.

5
00:00:20,460 --> 00:00:27,090
But once we get to this page our dropdown still open but we know that will end up displaying the same

6
00:00:27,090 --> 00:00:33,720
information to our user because the car items will be reflected in the checkout items and that just

7
00:00:33,720 --> 00:00:35,860
seems like a lot of redundancy.

8
00:00:35,880 --> 00:00:44,070
So what we can do is actually trigger a toggle whenever we click our go to checkout to toggle the hidden

9
00:00:44,070 --> 00:00:51,710
state of our cart because we know that in order for our user to access to go to checkout button the

10
00:00:51,710 --> 00:00:55,390
hidden state must be false because our dropdown is open.

11
00:00:55,640 --> 00:01:02,450
So we know that if we were to call our toggle there we're not going to get any unexpected behavior where

12
00:01:02,480 --> 00:01:09,890
we don't know the state of what our hidden is again because we know that dropdown must be open for them

13
00:01:09,890 --> 00:01:13,490
to have triggered the go to checkout button click.

14
00:01:13,520 --> 00:01:16,330
So what can we do in order to do this.

15
00:01:16,400 --> 00:01:25,120
Well we can just simply bring in our toggle hit and action into our cart dropdown component from redux

16
00:01:25,630 --> 00:01:32,620
cart cart actions and we'll bring in toggle cart hidden.

17
00:01:32,860 --> 00:01:39,910
Now the way that we're used to doing this inside our Kinect would be to write our map dispatch the props

18
00:01:40,300 --> 00:01:49,360
and then pass in a dispatched call of our action creator of toggle cart hit it now what we might not

19
00:01:49,360 --> 00:01:59,050
know is that connect actually passes dispatch into our components as a prop if we do not supply a second

20
00:01:59,140 --> 00:02:01,060
argument to connect.

21
00:02:01,090 --> 00:02:07,810
So if we don't supply map dispatch the props as the second parameter Connect will pass the dispatch

22
00:02:07,990 --> 00:02:10,700
into our dropdown.

23
00:02:10,810 --> 00:02:19,430
So our component as a property and the reason it does this is because if we need to make one off action

24
00:02:19,440 --> 00:02:26,400
dispatches Well there's no reason to write another map dispatch to props it might be more verbose so

25
00:02:26,400 --> 00:02:34,230
we can actually see this if we for example log out all the other props that we have access to.

26
00:02:34,290 --> 00:02:43,960
So just to demonstrate this let's just return and then console log all the other props that were knocked

27
00:02:44,010 --> 00:02:53,670
structuring so everything other than car items and history and now we'll see when we open that this

28
00:02:53,670 --> 00:02:58,000
is what we have we do have access to this dispatch.

29
00:02:58,130 --> 00:03:04,310
So what's great about that is that now instead of writing an unnecessary additional map dispatch the

30
00:03:04,310 --> 00:03:15,630
props we can just bring in dispatch like so expand our on click function using a multi line.

31
00:03:15,740 --> 00:03:16,440
Right.

32
00:03:16,490 --> 00:03:26,220
Which are the squiggles and then adding another dispatch passing in our toggle cart hit an action creator.

33
00:03:26,420 --> 00:03:35,840
And now if we save we'll see that if we go to our checkout our Togo card hidden action is being fired.

34
00:03:35,870 --> 00:03:41,300
So now that we have this improved user flow let's build out our checkout item.

