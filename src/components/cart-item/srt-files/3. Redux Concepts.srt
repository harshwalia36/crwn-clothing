1
00:00:00,630 --> 00:00:09,590
Why do we want to use redux as we mentioned before redux is really really good at managing state especially

2
00:00:09,600 --> 00:00:16,580
a large state so redux is a library that we would want to use if our apps get bigger and bigger and

3
00:00:16,580 --> 00:00:19,240
bigger and they have larger and larger state.

4
00:00:19,340 --> 00:00:25,460
Remember we want to use tools based on the problems of the self and we duck solves the problem of what

5
00:00:25,460 --> 00:00:33,500
happens when react apps get really really big and using just this dot state just doesn't make sense

6
00:00:33,500 --> 00:00:34,200
anymore.

7
00:00:34,280 --> 00:00:39,540
It gets more and more complicated remember react is what we call a view layer.

8
00:00:39,650 --> 00:00:43,540
It's really good at The View side but not necessarily at managing state.

9
00:00:43,640 --> 00:00:48,340
So use redux when things get really really complicated.

10
00:00:48,410 --> 00:00:56,420
The second point is useful for sharing data between containers and this is another thing with when projects

11
00:00:56,420 --> 00:01:04,400
become large when they need to start sharing state between containers with react.

12
00:01:04,400 --> 00:01:11,390
This is actually a little bit difficult and you have to move the state up one layer so that you have

13
00:01:11,420 --> 00:01:14,450
a parent that can share state between the two.

14
00:01:14,450 --> 00:01:21,290
But with redux this becomes really really easy as we're going to demonstrate in our coding section and

15
00:01:21,290 --> 00:01:28,330
finally redux has predictable state management using the three principles.

16
00:01:28,500 --> 00:01:35,980
Now what are the three principles these three principles and Redux are gonna really really make sense.

17
00:01:35,990 --> 00:01:41,680
At the end but I want to still introduce them to you so that we're aware of them.

18
00:01:41,690 --> 00:01:49,010
The first one is the idea of single source of truth and this is a fancy way of saying that we have one

19
00:01:49,070 --> 00:01:53,740
single big object that describes the entire state of the app.

20
00:01:53,780 --> 00:02:01,760
Remember this we had one massive state object that describes everything within our app.

21
00:02:01,940 --> 00:02:09,520
So we have our single source of truth because react reacts based on whatever the state is.

22
00:02:09,710 --> 00:02:15,590
We can just have one big object that describes how the app should look and react we'll take care of

23
00:02:15,590 --> 00:02:15,710
it.

24
00:02:17,070 --> 00:02:24,560
The second principle is the idea that state is read only and this encourages something called Image

25
00:02:24,570 --> 00:02:32,400
ability which is not modifying the object and it prevents unexpected errors this way.

26
00:02:33,210 --> 00:02:41,190
So the state object that we will create with redux will actually never get modified and instead we would

27
00:02:41,190 --> 00:02:48,960
create a new state after each action is taken by the user and then finally the third principle is the

28
00:02:48,960 --> 00:02:56,580
idea that changes are made only using pure functions something that we've talked about in my previous

29
00:02:56,580 --> 00:02:57,080
course.

30
00:02:57,150 --> 00:03:05,460
The idea that a pure function is something that receives an input and always returns an output that

31
00:03:05,460 --> 00:03:06,870
is predictable.

32
00:03:06,870 --> 00:03:13,500
If we enter the same end but a thousand times we expect that function to have the same output a thousand

33
00:03:13,500 --> 00:03:21,450
times using these principles redux has some new words that we're going to introduce in our vocabulary

34
00:03:22,380 --> 00:03:25,520
and we're gonna be comfortable with them by the end of this section.

35
00:03:25,620 --> 00:03:31,860
The first one is action and action is something that a user does such as clicking on a button or a drop

36
00:03:31,860 --> 00:03:39,800
down menu and what happens in redux is as soon as a user clicks on something a button and creates an

37
00:03:39,800 --> 00:03:40,620
action.

38
00:03:40,820 --> 00:03:46,040
It goes through something called a reducer and a reducer is simply a function.

39
00:03:46,400 --> 00:03:54,230
A pure function that receives an input which is the action so the user just clicked on a button and

40
00:03:54,230 --> 00:04:06,230
creates an output and this output is the state or the store as we call it in redux which is the entire

41
00:04:06,230 --> 00:04:08,480
state of the app.

42
00:04:08,570 --> 00:04:16,100
So as it goes through the function the store gets updated and react because it notices this state change

43
00:04:16,490 --> 00:04:18,340
makes changes to the view.

44
00:04:19,790 --> 00:04:23,420
Again these are wars that we're going to encounter as we start coding along.

45
00:04:23,780 --> 00:04:25,780
Now why do this.

46
00:04:26,120 --> 00:04:33,410
I mean can we just have an action and then an action happens and then we just make changes.

47
00:04:33,410 --> 00:04:39,690
I mean that's how something like Jake we're used to work and yeah it looks more complicated doesn't

48
00:04:39,690 --> 00:04:39,830
it.

49
00:04:39,840 --> 00:04:47,100
Adding all these steps beforehand but as you can see above if you have tons of actions happening which

50
00:04:47,130 --> 00:04:49,470
with modern apps that are very interactive.

51
00:04:49,470 --> 00:04:55,440
This happens a lot where the users scroll action and then the clicks a button and then highlight something

52
00:04:55,710 --> 00:04:56,720
and so on and so forth.

53
00:04:56,790 --> 00:05:02,280
You see that the more and more actions we have the more changes we have to make and those changes might

54
00:05:02,280 --> 00:05:07,220
trigger other actions which trigger other changes and so on and so forth.

55
00:05:07,230 --> 00:05:10,530
And you can get pretty pretty complicated as you can see in this diagram.

56
00:05:11,540 --> 00:05:20,330
With redux we make sure that all the actions go through one reducer everything flows through this function

57
00:05:21,230 --> 00:05:30,350
and through this function it always because it's pure returns the same state based on the action and

58
00:05:30,440 --> 00:05:36,200
updates the store and this store now which represents what our app should look like.

59
00:05:36,260 --> 00:05:43,700
Makes changes so it kind of funnels all these actions into one reducer so that everything is predictable

60
00:05:43,700 --> 00:05:44,780
and nice.

61
00:05:44,780 --> 00:05:49,940
Again one of those things that's hard to really explain without encountering the problem first which

62
00:05:50,120 --> 00:05:58,060
we'll get to now redux and I want to teach this just for historical purposes uses an architectural Pradhan

63
00:05:58,070 --> 00:06:05,540
called Flux pattern architecture and software is used as a way to make sure that we're able to solve

64
00:06:05,570 --> 00:06:13,100
problems in a logical sense and in an organized fashion in this flux pattern which inspired the library

65
00:06:13,100 --> 00:06:13,970
redux.

66
00:06:13,970 --> 00:06:22,250
Has this idea of having an action and then having a dispatcher that dispatches this action to the store

67
00:06:22,550 --> 00:06:29,840
which is our state which updates the view and it's one way data flow everything flows one way if the

68
00:06:29,840 --> 00:06:35,570
view gets updated we go back to the action and again goes to dispatcher that dispatches the change to

69
00:06:35,570 --> 00:06:45,450
the store and then to the view and this was a pretty revolutionary idea because before that we had something

70
00:06:45,450 --> 00:06:53,960
called MVC or model view controller and you may have heard of it it was quite quite popular the idea

71
00:06:53,960 --> 00:07:02,150
with an MVC pattern is we have an action and that action is read by a controller.

72
00:07:02,150 --> 00:07:09,740
So again another JavaScript file that looks for actions user clicks on a button and based on whatever

73
00:07:09,740 --> 00:07:13,850
the controller says we update the model or the data.

74
00:07:13,850 --> 00:07:20,360
In this case so we can think of it as state we change something in the model and then it updates the

75
00:07:20,360 --> 00:07:20,630
view.

76
00:07:22,530 --> 00:07:29,310
Now the problem with the MVC pattern is well this diagram over here we have the controller that changes

77
00:07:29,310 --> 00:07:31,930
different pieces of the model.

78
00:07:32,130 --> 00:07:38,020
And this model can change the view that can trigger a another change.

79
00:07:38,100 --> 00:07:42,200
And that model can change another part of the view and so on and so forth.

80
00:07:42,300 --> 00:07:44,340
And we have this thing that we saw before.

81
00:07:45,030 --> 00:07:51,930
We have the craziness of actions and making changes all these arrows just criss crossing and not looking

82
00:07:51,930 --> 00:07:52,540
very nice.

83
00:07:53,440 --> 00:07:59,180
And although it might not be bad when your apps are smaller as your apps get bigger you want to do something

84
00:07:59,180 --> 00:07:59,650
like this.

85
00:07:59,650 --> 00:08:04,700
So it's logical and makes sense and that's what we want to do with architecture.

86
00:08:04,700 --> 00:08:11,900
We want to architect our apps in ways that as they grow although we may add a few things in the end

87
00:08:12,440 --> 00:08:21,710
everything is easier to reason about and understand so we have the flux pattern which enforces a unique

88
00:08:21,710 --> 00:08:30,770
directional data flow we have the MVC pattern which could definitely be improved if you get anything

89
00:08:30,860 --> 00:08:32,430
out of this video.

90
00:08:32,480 --> 00:08:40,790
The one thing I want you to understand is the idea that redux at the end of the day is pretty much the

91
00:08:40,790 --> 00:08:49,310
same as this DOD state and react with three ducks so we can replace this dot state and theoretically

92
00:08:49,310 --> 00:08:58,430
remove all of this dot state from react and have it all happen inside of this redux library which again

93
00:08:58,610 --> 00:09:09,320
we're going to do but one caveat you could technically have redux with the state but also still keep

94
00:09:09,650 --> 00:09:17,300
a little bit of React state in a component redux doesn't replace completely the this dot state or this

95
00:09:17,300 --> 00:09:19,390
dot set state and react.

96
00:09:19,520 --> 00:09:26,750
You can still use them together but like I said before without having gone into any of the code of redux

97
00:09:27,560 --> 00:09:30,630
this might look a little bit overwhelming and confusing.

98
00:09:30,800 --> 00:09:33,460
I promise you things are going to make sense by the end.

99
00:09:33,680 --> 00:09:40,100
Before I throw code onto the screen I want to make sure that you have some principles and concepts that

100
00:09:40,100 --> 00:09:40,850
we're working from.

